-- Create Schema
CREATE SCHEMA TIL_PORTFOLIO_PROJECTS.GIORGIA_A;

-- Create Tables 
CREATE TABLE TIL_PORTFOLIO_PROJECTS.GIORGIA_A.LEGO_COLOURS (
    ID NUMBER(38),
    NAME VARCHAR(255),
    RGB VARCHAR(255),
    IS_TRANS VARCHAR(255)
);

CREATE TABLE TIL_PORTFOLIO_PROJECTS.GIORGIA_A.LEGO_INVENTORIES (
    ID NUMBER(38),
    VERSION NUMBER(38),
    SET_NUM VARCHAR(255)
);

CREATE TABLE TIL_PORTFOLIO_PROJECTS.GIORGIA_A.LEGO_INVENTORY_PARTS (
    INVENTORY_ID NUMBER(38),
    PART_NUM VARCHAR(255),
    COLOR_ID NUMBER(38),
    QUANTITY NUMBER(38),
    IS_SPARE VARCHAR(255)
);

CREATE TABLE TIL_PORTFOLIO_PROJECTS.GIORGIA_A.LEGO_INVENTORY_SETS (
    INVENTORY_ID NUMBER(38),
    SET_NUM VARCHAR(255),
    QUANTITY NUMBER(38)
);

CREATE TABLE TIL_PORTFOLIO_PROJECTS.GIORGIA_A.LEGO_PARTS (
    PART_NUM VARCHAR(255),
    NAME VARCHAR(255),
    PART_CAT_ID NUMBER(38)
);

CREATE TABLE TIL_PORTFOLIO_PROJECTS.GIORGIA_A.LEGO_PART_CATEGORIES (
    ID NUMBER(38),
    NAME VARCHAR(255)
);

CREATE TABLE TIL_PORTFOLIO_PROJECTS.GIORGIA_A.LEGO_SETS (
    SET_NUM VARCHAR(255),
    NAME VARCHAR(255),
    YEAR NUMBER(38),
    THEME_ID NUMBER(38),
    NUM_PARTS NUMBER(38)
);

CREATE TABLE TIL_PORTFOLIO_PROJECTS.GIORGIA_A.LEGO_THEMES (
    ID NUMBER(38),
    NAME VARCHAR(255),
    PARENT_ID NUMBER(38)
);

-- Populate tables with data from Staging Tables
INSERT INTO TIL_PORTFOLIO_PROJECTS.GIORGIA_A.LEGO_COLOURS (
SELECT *
FROM TIL_PORTFOLIO_PROJECTS.STAGING.LEGO_COLORS
);

INSERT INTO TIL_PORTFOLIO_PROJECTS.GIORGIA_A.LEGO_INVENTORIES (
SELECT * 
FROM TIL_PORTFOLIO_PROJECTS.STAGING.LEGO_INVENTORIES
);

INSERT INTO TIL_PORTFOLIO_PROJECTS.GIORGIA_A.LEGO_INVENTORY_PARTS (
SELECT *
FROM TIL_PORTFOLIO_PROJECTS.STAGING.LEGO_INVENTORY_PARTS
);

INSERT INTO TIL_PORTFOLIO_PROJECTS.GIORGIA_A.LEGO_INVENTORY_SETS (
SELECT *
FROM TIL_PORTFOLIO_PROJECTS.STAGING.LEGO_INVENTORY_SETS
);

INSERT INTO TIL_PORTFOLIO_PROJECTS.GIORGIA_A.LEGO_PART_CATEGORIES (
SELECT * 
FROM TIL_PORTFOLIO_PROJECTS.STAGING.LEGO_PART_CATEGORIES
);

INSERT INTO TIL_PORTFOLIO_PROJECTS.GIORGIA_A.LEGO_PARTS (
SELECT *
FROM TIL_PORTFOLIO_PROJECTS.STAGING.LEGO_PARTS
);

INSERT INTO TIL_PORTFOLIO_PROJECTS.GIORGIA_A.LEGO_SETS (
SELECT * 
FROM TIL_PORTFOLIO_PROJECTS.STAGING.LEGO_SETS
);

INSERT INTO TIL_PORTFOLIO_PROJECTS.GIORGIA_A.LEGO_THEMES (
SELECT *
FROM TIL_PORTFOLIO_PROJECTS.STAGING.LEGO_THEMES
);

--Database schema
USE TIL_PORTFOLIO_PROJECTS.GIORGIA_A;

-- Add Primary Keys
ALTER TABLE TIL_PORTFOLIO_PROJECTS.GIORGIA_A.LEGO_INVENTORIES ADD PRIMARY KEY (ID);
ALTER TABLE TIL_PORTFOLIO_PROJECTS.GIORGIA_A.LEGO_COLOURS ADD PRIMARY KEY (ID);
ALTER TABLE TIL_PORTFOLIO_PROJECTS.GIORGIA_A.LEGO_PARTS ADD PRIMARY KEY (PART_NUM);
ALTER TABLE TIL_PORTFOLIO_PROJECTS.GIORGIA_A.LEGO_PART_CATEGORIES ADD PRIMARY KEY (ID);
ALTER TABLE TIL_PORTFOLIO_PROJECTS.GIORGIA_A.LEGO_SETS ADD PRIMARY KEY (SET_NUM);
ALTER TABLE TIL_PORTFOLIO_PROJECTS.GIORGIA_A.LEGO_THEMES ADD PRIMARY KEY (ID);

-- Add Foreign Keys
ALTER TABLE LEGO_INVENTORY_SETS ADD FOREIGN KEY (INVENTORY_ID) REFERENCES LEGO_INVENTORIES(ID);
ALTER TABLE LEGO_INVENTORY_SETS ADD FOREIGN KEY (SET_NUM) REFERENCES LEGO_SETS(SET_NUM);

ALTER TABLE LEGO_INVENTORIES ADD FOREIGN KEY (SET_NUM) REFERENCES LEGO_SETS(SET_NUM);

ALTER TABLE LEGO_INVENTORY_PARTS ADD FOREIGN KEY (INVENTORY_ID) REFERENCES LEGO_INVENTORIES(ID);
ALTER TABLE LEGO_INVENTORY_PARTS ADD FOREIGN KEY (PART_NUM) REFERENCES LEGO_PARTS(PART_NUM);
ALTER TABLE LEGO_INVENTORY_PARTS ADD FOREIGN KEY (COLOR_ID) REFERENCES LEGO_COLOURS(ID);

ALTER TABLE LEGO_PARTS ADD FOREIGN KEY (PART_CAT_ID) REFERENCES LEGO_PART_CATEGORIES(ID);

ALTER TABLE LEGO_SETS ADD FOREIGN KEY (THEME_ID) REFERENCES LEGO_THEMES(ID);

-- Find unique lego blocks in lego sets
CREATE VIEW UNIQUE_LEGO_SETS AS
WITH UNIQUE_PARTS AS (
SELECT 
lp.part_num,
lp.name,
COUNT (DISTINCT li.set_num) as unique_parts
FROM lego_parts as lp
INNER JOIN lego_part_categories as lpc on lpc.id=lp.part_cat_id
INNER JOIN lego_inventory_parts as lip on lip.part_num=lp.part_num
INNER JOIN lego_inventories as li on li.id=lip.inventory_id
GROUP BY lp.part_num, lp.name
HAVING COUNT(DISTINCT li.set_num) =1
)

SELECT 
ls.name as set_name,
ls.year,
lt.name as theme,
COUNT(up.part_num) as unique_parts,
COUNT(lp.name) as total_parts,
COUNT(up.part_num)/COUNT(lp.name) as uniqueness
FROM lego_parts as lp
INNER JOIN lego_inventory_parts as lip on lip.part_num=lp.part_num
INNER JOIN lego_inventories as li on li.id=lip.inventory_id
INNER JOIN lego_sets as ls on ls.set_num=li.set_num
INNER JOIN lego_part_categories as lpc on lpc.id=lp.part_cat_id
LEFT JOIN lego_themes as lt on lt.id=ls.theme_id
LEFT JOIN UNIQUE_PARTS as up on up.part_num=lp.part_num
GROUP BY ls.name, ls.year, lt.name;

SELECT * FROM til_portfolio_projects.giorgia_a.unique_lego_sets;